{
  "openrpc": "1.2.4",
  "info": {
    "title": "Ethereum APIs for Query and Transact (preview)",
    "description": "This document describes the Ethereum native APIs that are supported by the Query And Transact Instant API Access preview.",
    "version": "0.0.1"
  },
  "servers": [
    {
      "name": "Endpoint URL and API token info",
      "url": "https://868605ce-acde-424e-800c-55ab87808268.ethereum.bison.run/",
      "description": "This is the server endpoint URL for preview. During the preview, this endpoint will work across all projects. \n\n **Authentication:** \n\n This endpoint uses HTTP Basic Auth. \n\n To authenticate to these APIs: \n\n - Create a project in the Coinbase Cloud Console \n - Grab your project-specific API Access Token username and password from the project overview page \n - Include your username and password as `auth` in each HTTP request"
    }
  ],
  "methods": [
    {
      "name": "web3_clientVersion",
      "description": "Returns the version of the current client",
      "summary": "current client version",
      "params": [],
      "result": {
        "name": "clientVersion",
        "description": "client version",
        "schema": {
          "title": "clientVersion",
          "type": "string"
        }
      }
    },
    {
      "name": "net_version",
      "summary": "Network identifier associated with network",
      "description": "Returns the network ID associated with the current network.",
      "params": [],
      "result": {
        "name": "networkId",
        "description": "Network ID associated with the current network",
        "schema": {
          "title": "networkId",
          "type": "string",
          "pattern": "^[\\d]+$"
        }
      }
    },
    {
      "name": "eth_blockNumber",
      "summary": "Returns the number of most recent block.",
      "params": [],
      "result": {
        "$ref": "#/components/contentDescriptors/BlockNumber"
      }
    },
    {
      "name": "eth_call",
      "summary": "Executes a new message call (locally) immediately without creating a transaction on the block chain.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Transaction"
        },
        {
          "$ref": "#/components/contentDescriptors/BlockNumber"
        }
      ],
      "result": {
        "name": "returnValue",
        "description": "The return value of the executed contract",
        "schema": {
          "$ref": "#/components/schemas/Bytes"
        }
      }
    },
    {
      "name": "eth_chainId",
      "summary": "Returns the currently configured chain id",
      "description": "Returns the currently configured chain id, a value used in replay-protected transaction signing as introduced by [EIP-155](https://github.com/ethereum/EIPs/blob/master/EIPS/eip-155.md).",
      "params": [],
      "result": {
        "name": "chainId",
        "description": "hex format integer of the current chain id. Defaults are ETC=61, ETH=1, Morden=62.",
        "schema": {
          "title": "chainId",
          "type": "string",
          "pattern": "^0x[a-fA-F\\d]+$"
        }
      }
    },
    {
      "name": "eth_estimateGas",
      "summary": "Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain. Note that the estimate may be significantly more than the amount of gas actually used by the transaction, for a variety of reasons including EVM mechanics and node performance.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Transaction"
        }
      ],
      "result": {
        "name": "gasUsed",
        "description": "The amount of gas used",
        "schema": {
          "$ref": "#/components/schemas/Integer"
        }
      }
    },
    {
      "name": "eth_feeHistory",
      "summary": "Transaction fee history",
      "description": "Returns transaction base fee per gas and effective priority fee per gas for the requested/supported block range.",
      "params": [
        {
          "name": "blockCount",
          "description": "Requested range of blocks. Clients will return less than the requested range if not all blocks are available.",
          "required": true,
          "schema": {
            "title": "hex encoded unsigned integer",
            "type": "string",
            "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$"
          }
        },
        {
          "name": "newestBlock",
          "description": "Highest block of the requested range.",
          "required": true,
          "schema": {
            "title": "Block number or tag",
            "oneOf": [
              {
                "title": "Block number",
                "type": "string",
                "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$"
              },
              {
                "title": "Block tag",
                "type": "string",
                "enum": [
                  "earliest",
                  "finalized",
                  "safe",
                  "latest",
                  "pending"
                ],
                "description": "`earliest`: The lowest numbered block the client has available; `finalized`: The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination; `safe`: The most recent block that is safe from re-orgs under honest majority and certain synchronicity assumptions; `latest`: The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions; `pending`: A sample next block built by the client on top of `latest` and containing the set of transactions usually taken from local mempool. Before the merge transition is finalized, any call querying for `finalized` or `safe` block MUST be responded to with `-39001: Unknown block` error"
              }
            ]
          }
        },
        {
          "name": "rewardPercentiles",
          "description": "A monotonically increasing list of percentile values. For each block in the requested range, the transactions will be sorted in ascending order by effective tip per gas and the coresponding effective tip for the percentile will be determined, accounting for gas consumed.",
          "required": true,
          "schema": {
            "title": "rewardPercentiles",
            "type": "array",
            "items": {
              "title": "rewardPercentile",
              "description": "Floating point value between 0 and 100.",
              "type": "number"
            }
          }
        }
      ],
      "result": {
        "name": "feeHistoryResult",
        "description": "Fee history for the returned block range. This can be a subsection of the requested range if not all blocks are available.",
        "schema": {
          "title": "feeHistoryResults",
          "description": "Fee history results.",
          "type": "object",
          "required": [
            "firstBlock",
            "baseFeePerGas",
            "gasUsedRatio"
          ],
          "properties": {
            "oldestBlock": {
              "title": "oldestBlock",
              "type": "string",
              "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
              "description": "Lowest number block of returned range."
            },
            "baseFeePerGas": {
              "title": "baseFeePerGasArray",
              "description": "An array of block base fees per gas. This includes the next block after the newest of the returned range, because this value can be derived from the newest block. Zeroes are returned for pre-EIP-1559 blocks.",
              "type": "array",
              "items": {
                "title": "hex encoded unsigned integer",
                "type": "string",
                "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$"
              }
            },
            "reward": {
              "title": "rewardArray",
              "description": "A two-dimensional array of effective priority fees per gas at the requested block percentiles.",
              "type": "array",
              "items": {
                "title": "rewardPercentile",
                "description": "An array of effective priority fee per gas data points from a single block. All zeroes are returned if the block is empty.",
                "type": "array",
                "items": {
                  "title": "rewardPercentile",
                  "type": "string",
                  "pattern": "^0x([1-9a-f]+[0-9a-f]*|0)$",
                  "description": "A given percentile sample of effective priority fees per gas from a single block in ascending order, weighted by gas used. Zeroes are returned if the block is empty."
                }
              }
            }
          }
        }
      }
    },
    {
      "name": "eth_gasPrice",
      "summary": "Returns the current price per gas in wei",
      "params": [],
      "result": {
        "$ref": "#/components/contentDescriptors/GasPrice"
      }
    },
    {
      "name": "eth_getBalance",
      "summary": "Returns Ether balance of a given or account or contract",
      "params": [
        {
          "name": "address",
          "required": true,
          "description": "The address of the account or contract",
          "schema": {
            "$ref": "#/components/schemas/Address"
          }
        },
        {
          "name": "blockNumber",
          "description": "A BlockNumber at which to request the balance",
          "schema": {
            "$ref": "#/components/schemas/BlockNumber"
          }
        }
      ],
      "result": {
        "name": "getBalanceResult",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      }
    },
    {
      "name": "eth_getBlockByHash",
      "summary": "Gets a block for a given hash",
      "params": [
        {
          "name": "blockHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockHash"
          }
        },
        {
          "name": "includeTransactions",
          "description": "If `true` it returns the full transaction objects, if `false` only the hashes of the transactions.",
          "required": true,
          "schema": {
            "title": "isTransactionsIncluded",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "getBlockByHashResult",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      }
    },
    {
      "name": "eth_getBlockByNumber",
      "summary": "Gets a block for a given number",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumber"
        },
        {
          "name": "includeTransactions",
          "description": "If `true` it returns the full transaction objects, if `false` only the hashes of the transactions.",
          "required": true,
          "schema": {
            "title": "isTransactionsIncluded",
            "type": "boolean"
          }
        }
      ],
      "result": {
        "name": "getBlockByNumberResult",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      }
    },
    {
      "name": "eth_getBlockTransactionCountByHash",
      "summary": "Returns the number of transactions in a block from a block matching the given block hash.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        }
      ],
      "result": {
        "name": "blockTransactionCountByHash",
        "description": "The Number of total transactions in the given block",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      }
    },
    {
      "name": "eth_getBlockTransactionCountByNumber",
      "summary": "Returns the number of transactions in a block from a block matching the given block number.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumber"
        }
      ],
      "result": {
        "name": "blockTransactionCountByHash",
        "description": "The Number of total transactions in the given block",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      }
    },
    {
      "name": "eth_getLogs",
      "summary": "Returns an array of all logs matching a given filter object.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Filter"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/Logs"
      }
    },
    {
      "name": "eth_getTransactionByBlockHashAndIndex",
      "summary": "Returns the information about a transaction requested by the block hash and index of which it was mined.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        },
        {
          "name": "index",
          "description": "The ordering in which a transaction is mined within its block.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Integer"
          }
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionResult"
      },
      "examples": [
        {
          "name": "nullExample",
          "params": [
            {
              "name": "blockHashExample",
              "value": "0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef"
            },
            {
              "name": "indexExample",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "nullResultExample",
            "value": null
          }
        }
      ]
    },
    {
      "name": "eth_getTransactionByBlockNumberAndIndex",
      "summary": "Returns the information about a transaction requested by the block number and index of which it was mined.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumber"
        },
        {
          "name": "index",
          "description": "The ordering in which a transaction is mined within its block.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Integer"
          }
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionResult"
      }
    },
    {
      "name": "eth_getTransactionByHash",
      "summary": "Returns the information about a transaction requested by transaction hash.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionHash"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/TransactionResult"
      }
    },
    {
      "name": "eth_getTransactionReceipt",
      "summary": "Returns the receipt information of a transaction by its hash.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/TransactionHash"
        }
      ],
      "result": {
        "name": "transactionReceiptResult",
        "description": "returns either a receipt or null",
        "schema": {
          "title": "transactionReceiptOrNull",
          "oneOf": [
            {
              "$ref": "#/components/schemas/Receipt"
            },
            {
              "$ref": "#/components/schemas/Null"
            }
          ]
        }
      }
    },
    {
      "name": "eth_getUncleByBlockHashAndIndex",
      "summary": "Returns information about a uncle of a block by hash and uncle index position.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        },
        {
          "name": "index",
          "description": "The ordering in which a uncle is included within its block.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Integer"
          }
        }
      ],
      "result": {
        "name": "uncle",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      }
    },
    {
      "name": "eth_getUncleByBlockNumberAndIndex",
      "summary": "Returns information about a uncle of a block by hash and uncle index position.",
      "params": [
        {
          "name": "uncleBlockNumber",
          "description": "The block in which the uncle was included",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/BlockNumber"
          }
        },
        {
          "name": "index",
          "description": "The ordering in which a uncle is included within its block.",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/Integer"
          }
        }
      ],
      "result": {
        "name": "uncleResult",
        "description": "returns an uncle block or null",
        "schema": {
          "$ref": "#/components/schemas/BlockOrNull"
        }
      },
      "examples": [
        {
          "name": "nullResultExample",
          "params": [
            {
              "name": "uncleBlockNumberExample",
              "value": "0x0"
            },
            {
              "name": "uncleBlockNumberIndexExample",
              "value": "0x0"
            }
          ],
          "result": {
            "name": "nullResultExample",
            "value": null
          }
        }
      ]
    },
    {
      "name": "eth_getUncleCountByBlockHash",
      "summary": "Returns the number of uncles in a block from a block matching the given block hash.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockHash"
        }
      ],
      "result": {
        "name": "uncleCountResult",
        "description": "The Number of total uncles in the given block",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      }
    },
    {
      "name": "eth_getUncleCountByBlockNumber",
      "summary": "Returns the number of uncles in a block from a block matching the given block number.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/BlockNumber"
        }
      ],
      "result": {
        "$ref": "#/components/contentDescriptors/UncleCountResult"
      }
    },
    {
      "name": "eth_getWork TBD SHANA MAY REMOVE",
      "summary": "Returns the hash of the current block, the seedHash, and the boundary condition to be met ('target').",
      "params": [],
      "result": {
        "name": "work",
        "schema": {
          "title": "getWorkResults",
          "type": "array",
          "items": [
            {
              "$ref": "#/components/schemas/PowHash"
            },
            {
              "$ref": "#/components/schemas/SeedHash"
            },
            {
              "$ref": "#/components/schemas/Difficulty"
            }
          ]
        }
      }
    },
    {
      "name": "eth_hashrate TBD SHANA MAY REMOVE",
      "summary": "Returns the number of hashes per second that the node is mining with.",
      "params": [],
      "result": {
        "name": "hashesPerSecond",
        "description": "Integer of the number of hashes per second",
        "schema": {
          "$ref": "#/components/schemas/Integer"
        }
      }
    },
    {
      "name": "eth_mining TBD SHANA MAY REMOVE",
      "summary": "Returns true if client is actively mining new blocks.",
      "params": [],
      "result": {
        "name": "mining",
        "description": "Whether or not the client is mining",
        "schema": {
          "type": "boolean"
        }
      }
    },
    {
      "name": "eth_protocolVersion",
      "summary": "Returns the current ethereum protocol version.",
      "params": [],
      "result": {
        "name": "protocolVersion",
        "description": "The current ethereum protocol version",
        "schema": {
          "$ref": "#/components/schemas/Integer"
        }
      }
    },
    {
      "name": "eth_sendRawTransaction",
      "summary": "Creates new message call transaction or a contract creation for signed transactions.",
      "params": [
        {
          "name": "signedTransactionData",
          "required": true,
          "description": "The signed transaction data",
          "schema": {
            "$ref": "#/components/schemas/Bytes"
          }
        }
      ],
      "result": {
        "name": "transactionHash",
        "description": "The transaction hash, or the zero hash if the transaction is not yet available.",
        "schema": {
          "$ref": "#/components/schemas/Keccak"
        }
      }
    },
    {
      "name": "eth_submitWork TBD SHANA MAY REMOVE ",
      "summary": "Used for submitting a proof-of-work solution.",
      "params": [
        {
          "$ref": "#/components/contentDescriptors/Nonce"
        },
        {
          "name": "powHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/PowHash"
          }
        },
        {
          "name": "mixHash",
          "required": true,
          "schema": {
            "$ref": "#/components/schemas/MixHash"
          }
        }
      ],
      "result": {
        "name": "solutionValid",
        "description": "returns true if the provided solution is valid, otherwise false.",
        "schema": {
          "type": "boolean"
        }
      },
      "examples": [
        {
          "name": "submitWorkExample",
          "params": [
            {
              "name": "nonceExample",
              "description": "example of a number only used once",
              "value": "0x0000000000000001"
            },
            {
              "name": "powHashExample",
              "description": "proof of work to submit",
              "value": "0x6bf2cAE0dE3ec3ecA5E194a6C6e02cf42aADfe1C2c4Fff12E5D36C3Cf7297F22"
            },
            {
              "name": "mixHashExample",
              "description": "the mix digest example",
              "value": "0xD1FE5700000000000000000000000000D1FE5700000000000000000000000000"
            }
          ],
          "result": {
            "name": "solutionInvalidExample",
            "description": "this example should return `false` as it is not a valid pow to submit",
            "value": false
          }
        }
      ]
    }
  ],
  "components": {
    "schemas": {
      "ProofNode": {
        "title": "proofNode",
        "description": "An individual node used to prove a path down a merkle-patricia-tree",
        "$ref": "#/components/schemas/Bytes"
      },
      "StorageProofKey": {
        "title": "storageProofKey",
        "description": "The key used to get the storage slot in its account tree.",
        "$ref": "#/components/schemas/Integer"
      },
      "StorageProof": {
        "title": "storageProofSet",
        "type": "array",
        "description": "Current block header PoW hash.",
        "items": {
          "title": "storageProof",
          "type": "object",
          "description": "Object proving a relationship of a storage value to an account's storageHash.",
          "properties": {
            "key": {
              "$ref": "#/components/schemas/StorageProofKey"
            },
            "value": {
              "title": "storageProofValue",
              "description": "The value of the storage slot in its account tree",
              "$ref": "#/components/schemas/Integer"
            },
            "proof": {
              "$ref": "#/components/schemas/ProofNodes"
            }
          }
        }
      },
      "ProofNodes": {
        "title": "proofNodes",
        "type": "array",
        "description": "The set of node values needed to traverse a patricia merkle tree (from root to leaf) to retrieve a value",
        "items": {
          "$ref": "#/components/schemas/ProofNode"
        }
      },
      "PowHash": {
        "title": "powHash",
        "description": "Current block header PoW hash.",
        "$ref": "#/components/schemas/DataWord"
      },
      "SeedHash": {
        "title": "seedHash",
        "description": "The seed hash used for the DAG.",
        "$ref": "#/components/schemas/DataWord"
      },
      "MixHash": {
        "title": "mixHash",
        "description": "The mix digest.",
        "$ref": "#/components/schemas/DataWord"
      },
      "Difficulty": {
        "title": "difficulty",
        "description": "The boundary condition ('target'), 2^256 / difficulty.",
        "$ref": "#/components/schemas/DataWord"
      },
      "FilterId": {
        "title": "filterId",
        "type": "string",
        "description": "An identifier used to reference the filter."
      },
      "BlockHash": {
        "title": "blockHash",
        "type": "string",
        "pattern": "^0x[a-fA-F\\d]{64}$",
        "description": "The hex representation of the Keccak 256 of the RLP encoded block"
      },
      "BlockNumber": {
        "title": "blockNumber",
        "type": "string",
        "description": "The hex representation of the block's height",
        "$ref": "#/components/schemas/Integer"
      },
      "BlockNumberTag": {
        "title": "blockNumberTag",
        "type": "string",
        "description": "The optional block height description",
        "enum": [
          "earliest",
          "latest",
          "pending"
        ]
      },
      "BlockOrNull": {
        "title": "blockOrNull",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Block"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "IntegerOrNull": {
        "title": "integerOrNull",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Integer"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "AddressOrNull": {
        "title": "addressOrNull",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "Receipt": {
        "title": "receipt",
        "type": "object",
        "description": "The receipt of a transaction",
        "required": [
          "blockHash",
          "blockNumber",
          "contractAddress",
          "cumulativeGasUsed",
          "from",
          "gasUsed",
          "logs",
          "logsBloom",
          "to",
          "transactionHash",
          "transactionIndex"
        ],
        "properties": {
          "blockHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/BlockNumber"
          },
          "contractAddress": {
            "title": "ReceiptContractAddress",
            "description": "The contract address created, if the transaction was a contract creation, otherwise null",
            "$ref": "#/components/schemas/AddressOrNull"
          },
          "cumulativeGasUsed": {
            "title": "ReceiptCumulativeGasUsed",
            "description": "The gas units used by the transaction",
            "$ref": "#/components/schemas/Integer"
          },
          "from": {
            "$ref": "#/components/schemas/From"
          },
          "gasUsed": {
            "title": "ReceiptGasUsed",
            "description": "The total gas used by the transaction",
            "$ref": "#/components/schemas/Integer"
          },
          "logs": {
            "title": "logs",
            "type": "array",
            "description": "An array of all the logs triggered during the transaction",
            "items": {
              "$ref": "#/components/schemas/Log"
            }
          },
          "logsBloom": {
            "$ref": "#/components/schemas/BloomFilter"
          },
          "to": {
            "$ref": "#/components/schemas/To"
          },
          "transactionHash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/TransactionIndex"
          },
          "postTransactionState": {
            "title": "ReceiptPostTransactionState",
            "description": "The intermediate stateRoot directly after transaction execution.",
            "$ref": "#/components/schemas/Keccak"
          },
          "status": {
            "title": "ReceiptStatus",
            "description": "Whether or not the transaction threw an error.",
            "type": "boolean"
          }
        }
      },
      "BloomFilter": {
        "title": "bloomFilter",
        "type": "string",
        "description": "A 2048 bit bloom filter from the logs of the transaction. Each log sets 3 bits though taking the low-order 11 bits of each of the first three pairs of bytes in a Keccak 256 hash of the log's byte series"
      },
      "Log": {
        "title": "log",
        "type": "object",
        "description": "An indexed event generated during a transaction",
        "properties": {
          "address": {
            "title": "LogAddress",
            "description": "Sender of the transaction",
            "$ref": "#/components/schemas/Address"
          },
          "blockHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/BlockNumber"
          },
          "data": {
            "title": "LogData",
            "description": "The data/input string sent along with the transaction",
            "$ref": "#/components/schemas/Bytes"
          },
          "logIndex": {
            "title": "LogIndex",
            "description": "The index of the event within its transaction, null when its pending",
            "$ref": "#/components/schemas/Integer"
          },
          "removed": {
            "title": "logIsRemoved",
            "description": "Whether or not the log was orphaned off the main chain",
            "type": "boolean"
          },
          "topics": {
            "$ref": "#/components/schemas/Topics"
          },
          "transactionHash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/TransactionIndex"
          }
        }
      },
      "Topics": {
        "title": "LogTopics",
        "description": "Topics are order-dependent. Each topic can also be an array of DATA with 'or' options.",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Topic"
        }
      },
      "Topic": {
        "title": "topic",
        "description": "32 Bytes DATA of indexed log arguments. (In solidity: The first topic is the hash of the signature of the event (e.g. Deposit(address,bytes32,uint256))",
        "$ref": "#/components/schemas/DataWord"
      },
      "TransactionIndex": {
        "title": "transactionIndex",
        "description": "The index of the transaction. null when its pending",
        "$ref": "#/components/schemas/IntegerOrNull"
      },
      "BlockNumberOrNull": {
        "title": "blockNumberOrNull",
        "description": "The block number or null when its the pending block",
        "oneOf": [
          {
            "$ref": "#/components/schemas/BlockNumber"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "BlockHashOrNull": {
        "title": "blockHashOrNull",
        "description": "The block hash or null when its the pending block",
        "$ref": "#/components/schemas/KeccakOrPending"
      },
      "NonceOrNull": {
        "title": "nonceOrNull",
        "description": "Randomly selected number to satisfy the proof-of-work or null when its the pending block",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Nonce"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "From": {
        "title": "From",
        "description": "The sender of the transaction",
        "$ref": "#/components/schemas/Address"
      },
      "To": {
        "title": "To",
        "description": "Destination address of the transaction. Null if it was a contract create.",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Address"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "Block": {
        "title": "Block",
        "description": "The Block is the collection of relevant pieces of information (known as the block header), together with information corresponding to the comprised transactions, and a set of other block headers that are known to have a parent equal to the present block’s parent’s parent.",
        "type": "object",
        "properties": {
          "number": {
            "$ref": "#/components/schemas/BlockNumberOrNull"
          },
          "hash": {
            "$ref": "#/components/schemas/BlockHashOrNull"
          },
          "parentHash": {
            "$ref": "#/components/schemas/BlockHash"
          },
          "nonce": {
            "$ref": "#/components/schemas/NonceOrNull"
          },
          "sha3Uncles": {
            "title": "blockShaUncles",
            "description": "Keccak hash of the uncles data in the block",
            "$ref": "#/components/schemas/Keccak"
          },
          "logsBloom": {
            "title": "blockLogsBloom",
            "type": "string",
            "description": "The bloom filter for the logs of the block or null when its the pending block",
            "pattern": "^0x[a-fA-F\\d]+$"
          },
          "transactionsRoot": {
            "title": "blockTransactionsRoot",
            "description": "The root of the transactions trie of the block.",
            "$ref": "#/components/schemas/Keccak"
          },
          "stateRoot": {
            "title": "blockStateRoot",
            "description": "The root of the final state trie of the block",
            "$ref": "#/components/schemas/Keccak"
          },
          "receiptsRoot": {
            "title": "blockReceiptsRoot",
            "description": "The root of the receipts trie of the block",
            "$ref": "#/components/schemas/Keccak"
          },
          "miner": {
            "$ref": "#/components/schemas/AddressOrNull"
          },
          "difficulty": {
            "title": "blockDifficulty",
            "type": "string",
            "description": "Integer of the difficulty for this block"
          },
          "totalDifficulty": {
            "title": "blockTotalDifficulty",
            "description": "Integer of the total difficulty of the chain until this block",
            "$ref": "#/components/schemas/IntegerOrNull"
          },
          "extraData": {
            "title": "blockExtraData",
            "type": "string",
            "description": "The 'extra data' field of this block"
          },
          "size": {
            "title": "blockSize",
            "type": "string",
            "description": "Integer the size of this block in bytes"
          },
          "gasLimit": {
            "title": "blockGasLimit",
            "type": "string",
            "description": "The maximum gas allowed in this block"
          },
          "gasUsed": {
            "title": "blockGasUsed",
            "type": "string",
            "description": "The total used gas by all transactions in this block"
          },
          "timestamp": {
            "title": "blockTimeStamp",
            "type": "string",
            "description": "The unix timestamp for when the block was collated"
          },
          "transactions": {
            "title": "transactionsOrHashes",
            "description": "Array of transaction objects, or 32 Bytes transaction hashes depending on the last given parameter",
            "type": "array",
            "items": {
              "title": "transactionOrTransactionHash",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Transaction"
                },
                {
                  "$ref": "#/components/schemas/TransactionHash"
                }
              ]
            }
          },
          "uncles": {
            "title": "uncleHashes",
            "description": "Array of uncle hashes",
            "type": "array",
            "items": {
              "title": "uncleHash",
              "description": "Block hash of the RLP encoding of an uncle block",
              "$ref": "#/components/schemas/Keccak"
            }
          }
        }
      },
      "Transaction": {
        "title": "transaction",
        "type": "object",
        "required": [
          "gas",
          "gasPrice",
          "nonce"
        ],
        "properties": {
          "blockHash": {
            "$ref": "#/components/schemas/BlockHashOrNull"
          },
          "blockNumber": {
            "$ref": "#/components/schemas/BlockNumberOrNull"
          },
          "from": {
            "$ref": "#/components/schemas/From"
          },
          "gas": {
            "title": "transactionGas",
            "type": "string",
            "description": "The gas limit provided by the sender in Wei"
          },
          "gasPrice": {
            "title": "transactionGasPrice",
            "type": "string",
            "description": "The gas price willing to be paid by the sender in Wei"
          },
          "hash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "input": {
            "title": "transactionInput",
            "type": "string",
            "description": "The data field sent with the transaction"
          },
          "nonce": {
            "title": "transactionNonce",
            "description": "The total number of prior transactions made by the sender",
            "$ref": "#/components/schemas/Nonce"
          },
          "to": {
            "$ref": "#/components/schemas/To"
          },
          "transactionIndex": {
            "$ref": "#/components/schemas/TransactionIndex"
          },
          "value": {
            "title": "transactionValue",
            "description": "Value of Ether being transferred in Wei",
            "$ref": "#/components/schemas/Keccak"
          },
          "v": {
            "title": "transactionSigV",
            "type": "string",
            "description": "ECDSA recovery id"
          },
          "r": {
            "title": "transactionSigR",
            "type": "string",
            "description": "ECDSA signature r"
          },
          "s": {
            "title": "transactionSigS",
            "type": "string",
            "description": "ECDSA signature s"
          }
        }
      },
      "Transactions": {
        "title": "transactions",
        "description": "An array of transactions",
        "type": "array",
        "items": {
          "$ref": "#/components/schemas/Transaction"
        }
      },
      "TransactionHash": {
        "title": "transactionHash",
        "type": "string",
        "description": "Keccak 256 Hash of the RLP encoding of a transaction",
        "$ref": "#/components/schemas/Keccak"
      },
      "KeccakOrPending": {
        "title": "keccakOrPending",
        "oneOf": [
          {
            "$ref": "#/components/schemas/Keccak"
          },
          {
            "$ref": "#/components/schemas/Null"
          }
        ]
      },
      "Keccak": {
        "title": "keccak",
        "type": "string",
        "description": "Hex representation of a Keccak 256 hash",
        "pattern": "^0x[a-fA-F\\d]{64}$"
      },
      "Nonce": {
        "title": "nonce",
        "description": "A number only to be used once",
        "$ref": "#/components/schemas/Integer"
      },
      "Null": {
        "title": "null",
        "type": "null",
        "description": "Null"
      },
      "Integer": {
        "title": "integer",
        "type": "string",
        "pattern": "^0x[a-fA-F0-9]+$",
        "description": "Hex representation of the integer"
      },
      "Address": {
        "title": "address",
        "type": "string",
        "pattern": "^0x[a-fA-F\\d]{40}$"
      },
      "Addresses": {
        "title": "addresses",
        "type": "array",
        "description": "List of contract addresses from which to monitor events",
        "items": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "Position": {
        "title": "position",
        "type": "string",
        "description": "Hex representation of the storage slot where the variable exists",
        "pattern": "^0x([a-fA-F0-9]?)+$"
      },
      "DataWord": {
        "title": "dataWord",
        "type": "string",
        "description": "Hex representation of a 256 bit unit of data",
        "pattern": "^0x([a-fA-F\\d]{64})?$"
      },
      "Bytes": {
        "title": "bytes",
        "type": "string",
        "description": "Hex representation of a variable length byte array",
        "pattern": "^0x([a-fA-F0-9]?)+$"
      }
    },
    "contentDescriptors": {
      "Block": {
        "name": "block",
        "summary": "A block",
        "description": "A block object",
        "schema": {
          "$ref": "#/components/schemas/Block"
        }
      },
      "Null": {
        "name": "Null",
        "description": "JSON Null value",
        "summary": "Null value",
        "schema": {
          "$ref": "#/components/schemas/Null"
        }
      },
      "Signature": {
        "name": "signature",
        "summary": "The signature.",
        "required": true,
        "schema": {
          "title": "signatureBytes",
          "type": "string",
          "description": "Hex representation of byte array between 2 and 65 chars long",
          "pattern": "0x^([A-Fa-f0-9]{2}){65}$"
        }
      },
      "GasPrice": {
        "name": "gasPrice",
        "required": true,
        "schema": {
          "title": "gasPriceResult",
          "description": "Integer of the current gas price",
          "$ref": "#/components/schemas/Integer"
        }
      },
      "Transaction": {
        "required": true,
        "name": "transaction",
        "schema": {
          "$ref": "#/components/schemas/Transaction"
        }
      },
      "TransactionResult": {
        "name": "transactionResult",
        "description": "Returns a transaction or null",
        "schema": {
          "title": "TransactionOrNull",
          "oneOf": [
            {
              "$ref": "#/components/schemas/Transaction"
            },
            {
              "$ref": "#/components/schemas/Null"
            }
          ]
        }
      },
      "UncleCountResult": {
        "name": "uncleCountResult",
        "description": "The Number of total uncles in the given block",
        "schema": {
          "$ref": "#/components/schemas/IntegerOrNull"
        }
      },
      "Message": {
        "name": "message",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Bytes"
        }
      },
      "Filter": {
        "name": "filter",
        "required": true,
        "schema": {
          "title": "filter",
          "type": "object",
          "description": "A filter used to monitor the blockchain for log/events",
          "properties": {
            "fromBlock": {
              "$ref": "#/components/schemas/BlockNumber"
            },
            "toBlock": {
              "$ref": "#/components/schemas/BlockNumber"
            },
            "address": {
              "title": "oneOrArrayOfAddresses",
              "oneOf": [
                {
                  "$ref": "#/components/schemas/Address"
                },
                {
                  "$ref": "#/components/schemas/Addresses"
                }
              ]
            },
            "topics": {
              "$ref": "#/components/schemas/Topics"
            }
          }
        }
      },
      "Address": {
        "name": "address",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Address"
        }
      },
      "BlockHash": {
        "name": "blockHash",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/BlockHash"
        }
      },
      "Nonce": {
        "name": "nonce",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Nonce"
        }
      },
      "Position": {
        "name": "key",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/Position"
        }
      },
      "Logs": {
        "name": "logs",
        "description": "An array of all logs matching filter with given id.",
        "schema": {
          "title": "setOfLogs",
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Log"
          }
        }
      },
      "FilterId": {
        "name": "filterId",
        "schema": {
          "$ref": "#/components/schemas/FilterId"
        }
      },
      "BlockNumber": {
        "name": "blockNumber",
        "required": true,
        "schema": {
          "title": "blockNumberOrTag",
          "oneOf": [
            {
              "$ref": "#/components/schemas/BlockNumber"
            },
            {
              "$ref": "#/components/schemas/BlockNumberTag"
            }
          ]
        }
      },
      "TransactionHash": {
        "name": "transactionHash",
        "required": true,
        "schema": {
          "$ref": "#/components/schemas/TransactionHash"
        }
      }
    }
  }
}
