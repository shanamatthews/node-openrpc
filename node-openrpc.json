{
    "openrpc": "1.2.4",
    "info": {
      "title": "Node",
      "version": "0.0.1"
    },
    "servers": [
      {
        "url": "tbd, but something like https://mainnet.ethereum.coinbasecloud.io"
      }
    ],
    "methods": [
      {
        "name": "coinbaseCloud_getBalances",
        "paramStructure": "by-name",
        "summary": "Get balance for multiple account addresses across one or more tokens",
        "description": "Get accurate balance for multiple account addresses across one or more tokens within a single blockchain and network. The balance incorporates transactions, internal transfers and all supported token transfers. Supports ERC-20 and ERC-721. This API is meant to be our primary API to get balances. A more simple and lower latency API that just fetches balance for a single address and token is `getSingleBalance`.",
        "tags": [
          {
            "name": "balances"
          }
        ],
        "params": [
          {
            "name": "addressAndContractList",
            "summary": "List of addresses and token identifiers",
            "description": "List of account or contact addresses and token identifiers. For Ethereum the token identifier is the token contract address.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AddressAndContractList"
            }
          },
          {
            "name": "blockchain",
            "summary": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc.",
            "description": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "summary": "E.g. Mainnet, testnet",
            "description": "E.g. Mainnet, testnet. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "balances",
          "summary": "Returned list of balance amounts",
          "description": "A list of balance amounts for the given token identifier and Block range in which the balances were computed. Note that Start is always genesis for this API.",
          "schema": {
            "$ref": "#/components/schemas/GetBalancesResponse"
          }
        },
        "errors": [
          {
            "code": -32602,
            "message": "Incorrect number of input params. Please check the spec and ensure all required params are provided."
          }
        ],
        "examples": [
          {
            "name": "USDC & DAI (ERC-20)",
            "summary": "Retrieve balances for USDC and DAI",
            "params": [
              {
                "name": "addressAndContractList",
                "value": [
                  {
                    "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                    "contract": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                  },
                  {
                    "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                    "contract": "0x6b175474e89094c44da98b954eedeac495271d0f"
                  }
                ]
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "balances",
              "value": [
                {
                  "blockHeight": 14794598,
                  "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                  "tokenBalances": [
                      {
                          "contract": "0x6b175474e89094c44da98b954eedeac495271d0f",
                          "amount": 1871941363914734149,
                          "decimals": 18
                      },
                      {
                          "contract": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                          "amount": 64014142,
                          "decimals": 6
                      }
                  ]
                }   
              ]
            }
          },
          {
            "name": "NFT (ERC-721)",
            "summary": "Retrieve NFT tokens",
            "params": [
              {
                "name": "addressAndContractList",
                "value": [
                  {
                    "address": "0xa3e90da6c1d5ea0b1b4e881d1eaaaaaaf3c25cc2",
                    "contract": "0x5180db8F5c931aaE63c74266b211F580155ecac8"
                  }
                ]
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "balances",
              "value": [
                {
                  "blockHeight": 14794052,
                  "address": "0xa3e90da6c1d5ea0b1b4e881d1eaaaaaaf3c25cc2",
                  "tokenBalances": [
                      {
                          "contract": "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                          "amount": 3,
                          "decimals": 1
                      }
                  ]
                }   
              ]
            }
          }
        ]
      },
      {
        "name": "coinbaseCloud_getSingleBalance",
        "paramStructure": "by-name",
        "summary": "Get balance for a single token and a single account address",
        "description": "Get an accurate balance for a single token and a single account address. The balance takes into account transactions, internal transfers and any supported token transfers. The caller should expect low latency from this API compared to a more heavy weight GetBalances.",
        "tags": [
          {
            "name": "balances"
          }
        ],
        "params": [
          {
            "name": "address",
            "summary": "Account address",
            "description": "Can be an account address or a contract address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contract",
            "summary": "Token identifier",
            "description": "Token identifier. For Ethereum the token identifier is the token contract address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchain",
            "summary": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc.",
            "description": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "summary": "E.g. Mainnet, testnet",
            "description": "E.g. Mainnet, testnet. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "balance",
          "summary": "Returned balance",
          "description": "Balance of the native cryptocurrency (ETH, BTC, etc) for the blockchain and network: Amount and Unit (e.g. wei, satoshi). Balance is returned in the smallest possible unit.",
          "schema": {
            "$ref": "#/components/schemas/GetSingleBalanceResponse"
          }
        },
        "errors": [
          {
            "code": -32602,
            "message": "Incorrect number of input params. Please check the spec and ensure all required params are provided."
          }
        ],
        "examples": [
          {
            "name": "USDC (ERC-20)",
            "summary": "Retrieve balances for USDC",
            "params": [
              {
                "name": "address",
                "value": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d"
              },
              {
                "name": "contract",
                "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "balance",
              "value": {
                "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                "tokenBalance": {
                    "contract": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                    "amount": 64014142,
                    "decimals": 6
                }
              }   
            }
          },
          {
            "name": "NFT (ERC-721)",
            "summary": "Retrieve NFT tokens",
            "params": [
              {
                "name": "address",
                "value": "0xa3e90da6c1d5ea0b1b4e881d1eaaaaaaf3c25cc2"
              },
              {
                "name": "contract",
                "value": "0x5180db8F5c931aaE63c74266b211F580155ecac8"
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "balance",
              "value": {
                "address": "0xa3e90da6c1d5ea0b1b4e881d1eaaaaaaf3c25cc2",
                "tokenBalance": {
                    "contract": "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                    "amount": 3,
                    "decimals": 1
                }
              }   
            }
          }
        ]
      },
      {
        "name": "coinbaseCloud_getTokenAllowances",
        "paramStructure": "by-name",
        "summary": "Get allowances for a specified owner and spender",
        "description": "Get allowances for a specified owner and spender across one or more tokens within a single blockchain and network.",
        "tags": [
          {
            "name": "balances"
          }
        ],
        "params": [
          {
            "name": "allowances",
            "summary": "Owner addresses, spender addresses, and token identifiers.",
            "description": "List of owner addresses, spender addresses, and token identifiers. For Ethereum, the token identifier is the token contract address.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Allowances"
            }
          },
          {
            "name": "blockchain",
            "summary": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc.",
            "description": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "summary": "E.g. Mainnet, testnet",
            "description": "E.g. Mainnet, testnet. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "allowances",
          "summary": "Returned list of allowances",
          "description": "List of allowances, including owner address, spender address, the block range in which the balances were computed (start is genesis), and a list of allowance information.",
          "schema": {
            "$ref": "#/components/schemas/GetTokenAllowancesResponse"
          }
        },
        "errors": [
          {
            "code": -32602,
            "message": "Incorrect number of input params. Please check the spec and ensure all required params are provided."
          }
        ],
        "examples": [
          {
            "name": "USDT (ERC-20)",
            "summary": "Retrieve allowances for USDT",
            "params": [
              {
                "name": "allowances",
                "value": [
                  {
                    "owner": "0xa646147bda82a866eba03568f363fc9c90185c6e",
                    "spender": "0xadd0e097b961572b2a1f5de572c622eef97e3d82",
                    "contracts": [
                      "0xdac17f958d2ee523a2206206994597c13d831ec7"
                    ]
                  }
                ]
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "allowances",
              "value": [
                {
                  "blockHeight": 14794058,
                  "owner": "0xa646147bda82a866eba03568f363fc9c90185c6e",
                  "spender": "0xadd0e097b961572b2a1f5de572c622eef97e3d82",
                  "tokenAllowances": [
                      {
                          "contract": "0xdac17f958d2ee523a2206206994597c13d831ec7",
                          "amount": 1443590544794273757,
                          "decimals": 6
                      }
                  ]
                }   
              ]
            }
          }
        ]
      },
      {
        "name": "coinbaseCloud_getTransactionsByAddress",
        "paramStructure": "by-name",
        "summary": "Get balance for a single token and a single account address",
        "description": "Returns external transactions, internal transactions (triggered by smart contracts) and token transfers for a given address. Includes activity from and to the input address. Returns the transactions in reverse chronological order.",
        "tags": [
          {
            "name": "balances"
          }
        ],
        "params": [
          {
            "name": "address",
            "summary": "Account address",
            "description": "Can be an account address or a contract address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "contract",
            "summary": "Token identifier",
            "description": "Token identifier. For Ethereum the token identifier is the token contract address.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "blockchain",
            "summary": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc.",
            "description": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "network",
            "summary": "E.g. Mainnet, testnet",
            "description": "E.g. Mainnet, testnet. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "result": {
          "name": "balance",
          "summary": "Returned balance",
          "description": "Balance of the native cryptocurrency (ETH, BTC, etc) for the blockchain and network: Amount and Unit (e.g. wei, satoshi). Balance is returned in the smallest possible unit.",
          "schema": {
            "$ref": "#/components/schemas/GetSingleBalanceResponse"
          }
        },
        "errors": [
          {
            "code": -32602,
            "message": "Incorrect number of input params. Please check the spec and ensure all required params are provided."
          }
        ],
        "examples": [
          {
            "name": "USDC (ERC-20)",
            "summary": "Retrieve balances for USDC",
            "params": [
              {
                "name": "address",
                "value": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d"
              },
              {
                "name": "contract",
                "value": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "balance",
              "value": {
                "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                "tokenBalance": {
                    "contract": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                    "amount": 64014142,
                    "decimals": 6
                }
              }   
            }
          },
          {
            "name": "NFT (ERC-721)",
            "summary": "Retrieve NFT tokens",
            "params": [
              {
                "name": "address",
                "value": "0xa3e90da6c1d5ea0b1b4e881d1eaaaaaaf3c25cc2"
              },
              {
                "name": "contract",
                "value": "0x5180db8F5c931aaE63c74266b211F580155ecac8"
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "balance",
              "value": {
                "address": "0xa3e90da6c1d5ea0b1b4e881d1eaaaaaaf3c25cc2",
                "tokenBalance": {
                    "contract": "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                    "amount": 3,
                    "decimals": 1
                }
              }   
            }
          }
        ]
      }
    ],
    "components": {
      "contentDescriptors": {
      },
      "schemas": {
        "Address": {
          "name": "address",
          "description": "Account address",
          "schema": {
            "type": "string"
          }
        },
        "Contract": {
          "name": "contract",
          "description": "Token identifier",
          "schema": {
            "type": "string"
          }
        },
        "AddressAndContract": {
          "type": "object",
          "required": [
            "address",
            "contract"
          ],
          "properties": {
            "address": {
              "$ref": "#/components/schemas/Address"
            },
            "contract": {
              "$ref": "#/components/schemas/Contract"
            }
          }
        },
        "AddressAndContractList": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AddressAndContract"
          }
        },
        "TokenBalance": {
          "type": "object",
          "required": [
            "contract",
            "amount",
            "decimals"
          ],
          "properties": {
            "contract": {
              "type": "string",
              "$ref": "#/components/schemas/Contract"
            },
            "amount": {
              "description": "Balance Amount (For ERC-721 it is the number of tokens).",
              "type": "integer"
            },
            "decimals": {
              "description": "Unit (decimals for ERC-20).",
              "type": "integer"
            }
          }
        },
        "BlockHeight": {
          "name": "blockHeight",
          "description": "Block range in which the balances were computed. Start is genesis.",
          "schema": {
            "type": "integer"
          }
        },
        "Balance": {
          "type": "object",
          "required": [
            "blockHeight",
            "address",
            "tokenBalances"
          ],
          "properties": {
            "blockHeight": {
              "type": "integer",
              "$ref": "#/components/schemas/BlockHeight"
            },
            "address": {
              "type": "string",
              "$ref": "#/components/schemas/Address"
            },
            "tokenBalances": {
              "type": "array",
              "description": "Balance of the native cryptocurrency (ETH, BTC, etc) for the blockchain and network. Balance is returned in the smallest possible unit.",
              "items": {
                "$ref": "#/components/schemas/TokenBalance"
              }
            }
          }
        },
        "GetBalancesResponse": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Balance"
          }
        },
        "GetSingleBalanceResponse": {
          "type": "object",
          "required": [
            "address",
            "tokenBalance"
          ],
          "properties": {
            "address": {
              "type": "string",
              "$ref": "#/components/schemas/Address"
            },
            "tokenBalance": {
              "type": "object",
              "description": "Balance of the native cryptocurrency (ETH, BTC, etc) for the blockchain and network. Balance is returned in the smallest possible unit.",
              "items": {
                "$ref": "#/components/schemas/TokenBalance"
              }
            }
          }
        },
        "Owner": {
          "name": "owner",
          "description": "Owner address",
          "schema": {
            "type": "string"
          }
        },
        "Spender": {
          "name": "spender",
          "description": "Spender address",
          "schema": {
            "type": "string"
          }
        },
        "Allowance": {
          "type": "object",
          "required": [
            "owner",
            "spender",
            "contracts"
          ],
          "properties": {
            "owner": {
              "type": "string",
              "$ref": "#/components/schemas/Owner"
            },
            "spender": {
              "type": "string",
              "$ref": "#/components/schemas/Spender"
            },
            "contracts": {
              "type": "array",
              "items": {
                "type": "string",
                "$ref": "#/components/schemas/Contract"
              }
            }
          }
        },
        "Allowances": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Allowance"
          }
        },
        "AllowancesResponse": {
          "type": "object",
          "required": [
            "blockHeight",
            "owner",
            "spender",
            "tokenAllowances"
          ],
          "properties": {
            "blockHeight": {
              "type": "integer",
              "$ref": "#/components/schemas/BlockHeight"
            },
            "owner": {
              "type": "string",
              "$ref": "#/components/schemas/Owner"
            },
            "spender": {
              "type": "string",
              "$ref": "#/components/schemas/Spender"
            },
            "tokenAllowances": {
              "type": "array",
              "items": {
                "$ref": "#/components/schemas/TokenBalance"
              }
            }
          }
        },
        "GetTokenAllowancesResponse": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AllowancesResponse"
          }
        }
      }
    }
  }
  