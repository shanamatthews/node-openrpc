{
    "openrpc": "1.2.4",
    "info": {
      "title": "Node",
      "version": "0.0.1"
    },
    "servers": [
      {
        "url": "https://mainnet.ethereum.coinbasecloud.io"
      }
    ],
    "methods": [
      {
        "name": "coinbaseCloud_getBalances",
        "paramStructure": "by-name",
        "summary": "Get balances across one or more tokens",
        "description": "Get accurate balance for multiple account addresses across one or more tokens within a single blockchain and network. The balance incorporates transactions, internal transfers and all supported token transfers. Supports ERC-20 and ERC-721. This API is meant to be our primary API to get balances. A more simple and lower latency API that just fetches balance for a single address and token is `getSingleBalance`.",
        "tags": [
          {
            "name": "balances"
          }
        ],
        "params": [
          {
            "name": "addressAndContractList",
            "description": "List of account or contact addresses and token identifiers. For Ethereum the token identifier is the token contract address.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/AddressAndContractList"
            }
          },
          {
            "name": "blockchain",
            "description": "E.g. Ethereum, Bitcoin, Optimism, Arbitrum, etc. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Blockchain"
            }
          },
          {
            "name": "network",
            "description": "E.g. Mainnet, testnet. Currently only supports Ethereum.",
            "required": true,
            "schema": {
              "$ref": "#/components/schemas/Network"
            }
          }
        ],
        "result": {
          "name": "balances",
          "description": "A list of balance amounts for the given token identifier and Block range in which the balances were computed. Note that Start is always genesis for this API.",
          "schema": {
            "$ref": "#/components/schemas/Balances"
          }
        },
        "errors": [
          {
            "code": -32602,
            "message": "Incorrect number of input params. Please check the spec and ensure all required params are provided."
          }
        ],
        "examples": [
          {
            "name": "USDC & DAI (ERC-20)",
            "summary": "Retrieve balances for USDC and DAI",
            "params": [
              {
                "name": "addressAndContractList",
                "value": [
                  {
                    "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                    "contract": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48"
                  },
                  {
                    "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                    "contract": "0x6b175474e89094c44da98b954eedeac495271d0f"
                  }
                ]
              },
              {
                "name": "blockchain",
                "value": "Ethereum"
              },
              {
                "name": "network",
                "value": "Mainnet"
              }
            ],
            "result": {
              "name": "balances",
              "value": [
                {
                  "blockHeight": 14794598,
                  "address": "0xdf0635793e91d4f8e7426dbd9ed08471186f428d",
                  "tokenBalances": [
                      {
                          "contract": "0x6b175474e89094c44da98b954eedeac495271d0f",
                          "amount": 1871941363914734149,
                          "decimals": 18
                      },
                      {
                          "contract": "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
                          "amount": 64014142,
                          "decimals": 6
                      }
                  ]
                }   
              ]
            }
          }
        ]
      },
      {
        "name": "create_pet",
        "summary": "Create a pet",
        "tags": [
          {
            "name": "pets"
          }
        ],
        "params": [
          {
            "name": "newPetName",
            "description": "Name of pet to create",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "newPetTag",
            "description": "Pet tag to create",
            "schema": {
              "type": "string"
            }
          }
        ],
        "examples": [
          {
            "name": "createPetExample",
            "description": "Create pet example",
            "params": [
              {
                "name": "newPetName",
                "value": "fluffy"
              },
              {
                "name": "tag",
                "value": "poodle"
              }
            ],
            "result": {
              "name": "listPetResultExample",
              "value": 7
            }
          }
        ],
        "result": {
          "$ref": "#/components/contentDescriptors/PetId"
        }
      },
      {
        "name": "get_pet",
        "summary": "Info for a specific pet",
        "tags": [
          {
            "name": "pets"
          }
        ],
        "params": [
          {
            "$ref": "#/components/contentDescriptors/PetId"
          }
        ],
        "result": {
          "name": "pet",
          "description": "Expected response to a valid request",
          "schema": {
            "$ref": "#/components/schemas/Pet"
          }
        },
        "examples": [
          {
            "name": "getPetExample",
            "description": "get pet example",
            "params": [
              {
                "name": "petId",
                "value": 7
              }
            ],
            "result": {
              "name": "getPetExampleResult",
              "value": {
                "name": "fluffy",
                "tag": "poodle",
                "id": 7
              }
            }
          }
        ]
      }
    ],
    "components": {
      "contentDescriptors": {
        "PetId": {
          "name": "petId",
          "required": true,
          "description": "The id of the pet to retrieve",
          "schema": {
            "$ref": "#/components/schemas/PetId"
          }
        }
      },
      "schemas": {
        "Blockchain": {
          "type": "string"
        },
        "Network": {
          "type": "string"
        },
        "PetId": {
          "type": "integer",
          "minimum": 0
        },
        "Pet": {
          "type": "object",
          "required": [
            "id",
            "name"
          ],
          "properties": {
            "id": {
              "$ref": "#/components/schemas/PetId"
            },
            "name": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        },
        "Pets": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Pet"
          }
        },
        "AddressAndContract": {
          "type": "object",
          "required": [
            "address",
            "contract"
          ],
          "properties": {
            "name": {
              "type": "string"
            },
            "tag": {
              "type": "string"
            }
          }
        },
        "AddressAndContractList": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/AddressAndContract"
          }
        },
        "TokenBalance": {
          "type": "object",
          "required": [
            "contract",
            "amount",
            "decimals"
          ],
          "properties": {
            "contract": {
              "description": "Token identifier",
              "type": "string"
            },
            "amount": {
              "description": "Balance Amount (For ERC-721 it is the number of tokens owned).",
              "type": "integer"
            },
            "decimals": {
              "description": "Unit (decimals for ERC-20).",
              "type": "integer"
            }
          }
        },
        "Balance": {
          "type": "object",
          "required": [
            "blockHeight",
            "address",
            "tokenBalances"
          ],
          "properties": {
            "blockHeight": {
              "description": "Block range in which the balances were computed. Start is genesis.",
              "type": "integer"
            },
            "address": {
              "description": "Account address",
              "type": "string"
            },
            "tokenBalances": {
              "type": "array",
              "description": "Balance of the native cryptocurrency (ETH, BTC, etc) for the blockchain and network. Balance is returned in the smallest possible unit.",
              "items": {
                "$ref": "#/components/schemas/TokenBalance"
              }
            }
          }
        },
        "Balances": {
          "type": "array",
          "items": {
            "$ref": "#/components/schemas/Balance"
          }
        }
      }
    }
  }
  